[{"body":"Welcome to the E-Office user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Archive application.\nGet started now ","link":"https://risetit.fah.uinjkt.ac.id/docs/eoffice/","section":"docs","title":"Administration"},{"body":" Fakultas Adab dan Humaniora Unit Riset Teknologi Informasi \u0026amp; Budaya Digital Terbuka. Bergabung Program ","link":"https://risetit.fah.uinjkt.ac.id/","section":"","title":"Beranda"},{"body":"These docs consists of two parts:\nCompose docs Builder docs. Please note that the features listed under each theme are independent of each other. That is to say, some features may only be found in one theme and not in both.\nCompose Builds ","link":"https://risetit.fah.uinjkt.ac.id/docs/","section":"docs","title":"Starting"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/","section":"course","title":"Akademi Abu Yogo"},{"body":" today\u0026#39;s pick Editorial choice for your\nBerita business Berita Bisnis 1 business Berita Bisnis 2 Most Recent longreads\nyou may also want to read\nbusiness Story 1 Not Available\nbusiness Story 2 Not Available\nbusiness Story 3 Not Available\nbusiness Story 4 Not Available\nPlaying Hard\nLatest games news around the globe\nbusiness Games 1 Not Available\nbusiness Games 2 Not Available\nbusiness Games 3 Not Available\nGames 1 Games 2 Games 3 Games 4 ","link":"https://risetit.fah.uinjkt.ac.id/news/","section":"news","title":"Berita"},{"body":"Bisnis\n","link":"https://risetit.fah.uinjkt.ac.id/news/business/","section":"news","title":"Bisnis"},{"body":"Bootcamp\n","link":"https://risetit.fah.uinjkt.ac.id/event/bootcamp/","section":"event","title":"Bootcamp"},{"body":"Welcome to the Compose theme user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Compose's blocks and templates.\nGet started now ","link":"https://risetit.fah.uinjkt.ac.id/track/project/","section":"track","title":"Compose Docs"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/course-4/","section":"course","title":"Course 4"},{"body":"Event\n","link":"https://risetit.fah.uinjkt.ac.id/event/","section":"event","title":"Event"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/culture/","section":"news","title":"Future"},{"body":"future\n","link":"https://risetit.fah.uinjkt.ac.id/news/futures/","section":"news","title":"Future"},{"body":"games\n","link":"https://risetit.fah.uinjkt.ac.id/news/games/","section":"news","title":"Games"},{"body":" Transformasi Berbasis Data Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan, perencancaan dan pengelolaan teknologi informasi yang menjadi bagian dalam program riset teknologi informasi Fakultas Adab dan Humaniora. Kegiatan Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan. Modular Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan. Layanan Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan. Magang Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan. Pengembangan Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan.\nMonitoring\nOperasional Bargabung menajadi bagian dari riset teknologi informasi Fakultas Adab dan Humaniora. Temukan dan monitor informasi terkait laporan. ","link":"https://risetit.fah.uinjkt.ac.id/report/","section":"","title":"Information"},{"body":" Menjadi Bagian Kami Sebagai implementasi semangat kolaborasi dan bentuk pengabdian masyarakat, maka unit riset teknologi informasi Fakultas Adab dan Humaniora membuka program Kuliah Kerja Nyata in Campus dan Program Magang dengan waktu terbatas. ","link":"https://risetit.fah.uinjkt.ac.id/event/internship/","section":"event","title":"Internship"},{"body":" We Need Your Participation Colaborative Work For Best Learning Experience Monitoring Operational Development Website Fakultas Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Ilmu Perpustakaan Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Sastra Ingris Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Bahasa dan Sastra Arab Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Sejarah Peradaban Islam Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Tarjamah Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Magister Sejarah Kebudayaan Islam Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nWebsite Magister Bahasa dan Sastra Arab Pengembangan website Fakultas Adab dan Humaniora dengan integrasi ke beberapa layanan fakultas.\noverview | details\nEvent Internal Gladiator Camp Pelatihan dasar untuk System administrator linux. Pelatihan ini terbagi menjadi 12 session dengan 12 kompetisi. Kompetisi diadakan pada akhir materi setiap session. Pelatihan ini menjadi syarat bagi anggota unit untuk bisa menjadi junior sysadmin pada unit riset teknologi di Fakultas Adab dan Humaniora.\nBatch 1\nWebmans Camp Pelatihan dasar untuk Web Management. Pelatihan ini terbagi menjadi 6 session. Pelatihan ini menjadi syarat bagi setiap anggota unit untuk bisa menjadi junior staff pada bagian pemeliharan dan pengembangan website di lingkungan Fakultas Adab dan Humaniora. Public ","link":"https://risetit.fah.uinjkt.ac.id/track/internship/","section":"track","title":"involve"},{"body":"Welcome to the Library user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Library application.\nGet started now ","link":"https://risetit.fah.uinjkt.ac.id/docs/library/","section":"docs","title":"Library System"},{"body":"test\n","link":"https://risetit.fah.uinjkt.ac.id/course/course-1/session-1/","section":"course","title":"Prevent Data ku"},{"body":"test\n","link":"https://risetit.fah.uinjkt.ac.id/course/course-2/session-1/","section":"course","title":"Prevent Data ku"},{"body":"test\n","link":"https://risetit.fah.uinjkt.ac.id/course/course-3/session-1/","section":"course","title":"Prevent Data ku"},{"body":"Heading 1 Heading 2 Headig 3 Yogo\n","link":"https://risetit.fah.uinjkt.ac.id/course/course-4/session-1/","section":"course","title":"Prevent Data ku"},{"body":" Hi, Salam Kenal Bergabung dengan Unit Riset Teknologi Fakultas Adab dan Humaniora dan temukan pengalaman yang menarik bersama kami. Pendaftaran Cerita Kami Informasi Adalah Kekuatan Temukan berbagai modul teknologi informasi yang dikemas dalam berbagai format pada sumber pembelajaran terbuka kami. Akademi Pelajari Lebih Lanjut Berita Pelajari Lebih Lanjut Tutorial Pelajari Lebih Lanjut Dokumentasi Pelajari Lebih Lanjut Mulai Sekarang Juga Tingkatkan keahlian anda dengan berpartisipasi dalam berbagai kegiatan yang menarik. Kami telah merancang berbagai kegiatan yang bisa disesuikan dengan kebutuhan anda, pilih kegiatan yang anda minati sekarang juga. Bootcamp Event Magang ","link":"https://risetit.fah.uinjkt.ac.id/program/","section":"","title":"Programs"},{"body":"Security\n","link":"https://risetit.fah.uinjkt.ac.id/news/security/","section":"news","title":"Security"},{"body":"games\n","link":"https://risetit.fah.uinjkt.ac.id/news/stories/","section":"news","title":"Stories"},{"body":"Tutorial\n","link":"https://risetit.fah.uinjkt.ac.id/howto/","section":"howto","title":"Tutorial"},{"body":"Welcome to the User Management guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use User Management application.\nGet started now ","link":"https://risetit.fah.uinjkt.ac.id/docs/account/","section":"docs","title":"User Account"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/course-1/session-2/","section":"course","title":"Prevent Data 2"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/course-2/session-2/","section":"course","title":"Prevent Data 2"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/course-3/session-2/","section":"course","title":"Prevent Data 2"},{"body":"test\n","link":"https://risetit.fah.uinjkt.ac.id/course/course-4/session-2/","section":"course","title":"Prevent Data 2"},{"body":"Berdasarkan kepada Surat Keputusan Keputusan Dekan Fakultas Adab dan Humaniora no.23 tahun 2023 maka struktur dari Unit Riset Teknologi Informasi Fakultas Adab dan Humaniora adalah\nJajaran Eksekutif Pengarah Dr. Ade Abdul Hak, M.Hum., CIQnR\nDekan Fakutlas Adab dan Humaniora\nPenanggung Jawab Dr. Ida Farida, MLIS\nWakil Dekan Bidang Akademik\nDr. Siti Amsariah, M.Ag\nWakil Dekan Bidang Administrasi Umum\nUsep Abdul Matin, M.A., Ph.D\nWakil Dekan Bidang Kemahasiswaan dan Kerjasama\nJajaran Manajerial Pemeliharaan Prayogo Pangestu S.Pd\nnull\nKerjasama Muhammad Azwar, M.Hum\nnull\nMoch. Syukur, S.Ag\nnull\nOperasional Gunawan Ismail\nnull\nPelatihan Muhammad Alimudin, S.Pd\nnull\nDokumentasi Akhmad Zakky, M.Hum\nnull\nPublikasi Akhmad Yusuf M.Hum\nnull\nPerencanaan Al Muhdil Karim\nnull\n","link":"https://risetit.fah.uinjkt.ac.id/about/struktur/","section":"about","title":"Struktur"},{"body":"Berdasarkan kepada Surat Keputusan Keputusan Dekan Fakultas Adab dan Humaniora no.23 tahun 2023 maka struktur dari Unit Riset Teknologi Informasi Fakultas Adab dan Humaniora adalah\nOH I/O N/A Legend N/A Veteran N/A Elite N/A Master N/A Senior N/A Junior N/A Newbie N/A Traine Achmad Baihaqi\n2 Points\nAde Setiawan\n2 Points\nCadete Muhammad Nasir\n0 Points\nBani Windra Purnomo\n0 Points\nFarras Hidayatullah\n0 Points\nMohammad Rafli At-Toriq\n0 Points\nMuhammad Yusron\n0 Points\nMuhammad Zacky\n0 Points\nFita Apriaulia Kusuma Anggrojati\n0 Points\nRifda Salsabila\n0 Points\nPutri Macrcella\n0 Points\nDiah Pitaloka Yanuar\n0 Points\nSafanah Nur Adzikra\n0 Points\nMuhammad Fatih\n0 Points\nAhmad Hudzaifah Adam\n0 Points\nFadil Darmawan\n0 Points\nFadil Darmawan\n0 Points\nReza Farizqi Akbar\n0 Points\nDzaky Wahyundar\n0 Points\nMuhammad Diky Nataputra\n0 Points\nIbnu Hafidz Romdon\n0 Points\nSultan Fajar Ramadhan\n0 Points\nAziz Nail Muyassar\n0 Points\nRendy Maulana\n0 Points\nRafa Bimo Satriyo\n0 Points\nMuhammad Adi Nugraha\n0 Points\nMuhammad Haydar Ilham Kamil\n0 Points\nIrfansyah\n0 Points\nWisnu Setiabudi\n0 Points\n","link":"https://risetit.fah.uinjkt.ac.id/about/member/","section":"about","title":"Anggota"},{"body":"Catatan peserta magang, KKN dan program lainya.\nKuliah Kerja Nyata Reksa Karya ( 2023 ) Abdullah Arif\n0 Points\nAhmad Raihan\n0 Points\nBani Windra Purnomo\n0 Points\nFarras Hidayatullah\n0 Points\nMohammad Rafli At-Toriq\n0 Points\n","link":"https://risetit.fah.uinjkt.ac.id/event/internship/reksakarya/","section":"event","title":"Reksakarya ( 2023 )"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/event/bootcamp/gladiator/","section":"event","title":"Gladiator Camp"},{"body":"Session 2 | On Going Date : 5-6 Agustus 2023\nStart : 04:00 PM, 5 Agustus 2023\nEnd : 04:00 AM, 6 Agustus 2023\nVenue : Fakultas Adab dan Humaniora\nScenario Peserta diberikan sebuah komputer dengan konfigurasi MAC ( Mandatory Access Control ), Firewall, Physical Guard dengan konfigurasi yang kacau. Peserta harus mampu melakukan normalisasi terhadap perangkat untuk bisa diakses baik secara fisik dan melalui jaringan lokal. Goal Peserta harus mampu melakukan installasi dan konfigrasi MAC ( Mandatory Access Control ) Application pada linux dengan package manager berbasis RPM dan DEB. Peserta harus mampu melakukan installasi dan konfigrasi Firewall Application pada linux dengan package manager berbasis RPM ( Firewalld ) dan DEB ( UFW ). Peserta harus mampu melakukan mengimplementasikan Prevention of Physical Attack Method untuk linux. Challange Peserta yang berhak mendapatkan poin adalah dua peserta dengan waktu tersingkat berdasarkan waktu operasi ( Time Attack ) Participant Finishing Score Awan 00:00:00 0 Adi 00:00:00 0 Baihaqi 00:00:00 0 Faras 00:00:00 0 Haydar 01:00:00 0 Rafa 00:00:00 0 Sultan 00:00:00 0 Wisnu 00:00:00 0 Classement Score Participant Points Awan 002 Adi 000 Baihaqi 002 Faras 000 Haydar 000 Rafa 000 Sultan 000 Wisnu 000 Session 1 | Reporting Date : 8-9 July 2023\nStart : 04:00 PM, 8 July 2023\nEnd : 04:00 AM, 9 July 2023\nVenue : Fakultas Adab dan Humaniora\nScenario Peserta diberikan sebuah perangkat yang belum dikenali untuk melakukan installasi ulang. Setiap peserta hanya diberikan sebuah USB Disk dan sebuah perangkat laptop. Peserta harus mampu melakukan installasi dual boot dengan sistem operasi windows dan linux pada perangkat objek. Goal Peserta harus mampu melakukan installasi dual boot pada perangkat objek Peserta harus mampu menemukan cara untuk melakukan backup pada perangkat objek dengan keterbatasan yang ada. Challange Peserta yang berhak mendapatkan poin adalah dua peserta dengan waktu tersingkat berdasarkan waktu operasi ( Time Attack ) Zero data loss Participant Finishing Score Awan 00:42:08 2 Adi 00:45:16 0 Baihaqi 00:41:25 2 Faras 00:47:27 0 Haydar 01:45:59 0 Rafa 00:46:27 0 Sultan 00:53:18 0 Wisnu 00:44:19 0 ","link":"https://risetit.fah.uinjkt.ac.id/event/bootcamp/gladiator/batch-1/","section":"event","title":"Gladiator Camp | Batch 1"},{"body":"Mermaid is library that helps you generate diagrams, flowcharts, and piecharts from text in a similar manner as markdown.\nWith compose theme, you can use mermaid using a custom shortcode as follows:\nSequence Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2sequenceDiagram 3 participant Alice 4 participant Bob 5 Alice-\u0026gt;\u0026gt;John: Hello John, how are you? 6 loop Healthcheck 7 John-\u0026gt;\u0026gt;John: Fight against hypochondria 8 end 9 Note right of John: Rational thoughts\u0026lt;br/\u0026gt;prevail... 10 John--\u0026gt;\u0026gt;Alice: Great! 11 John-\u0026gt;\u0026gt;Bob: How about you? 12 Bob--\u0026gt;\u0026gt;John: Jolly good! 13{{\u0026lt; /mermaid \u0026gt;}} Result\nsequenceDiagram participant Alice participant Bob Alice-\u003e\u003eJohn: Hello John, how are you? loop Healthcheck John-\u003e\u003eJohn: Fight against hypochondria end Note right of John: Rational thoughtsprevail... John--\u003e\u003eAlice: Great! John-\u003e\u003eBob: How about you? Bob--\u003e\u003eJohn: Jolly good! Flow Charts Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2flowchart TB 3 c1--\u0026gt;a2 4 subgraph one 5 a1--\u0026gt;a2 6 end 7 subgraph two 8 b1--\u0026gt;b2 9 end 10 subgraph three 11 c1--\u0026gt;c2 12 end 13 one --\u0026gt; two 14 three --\u0026gt; two 15 two --\u0026gt; c2 16{{\u0026lt; /mermaid \u0026gt;}} Result\nflowchart TB c1--\u003ea2 subgraph one a1--\u003ea2 end subgraph two b1--\u003eb2 end subgraph three c1--\u003ec2 end one --\u003e two three --\u003e two two --\u003e c2 Graphs Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph TB 3 sq[Square shape] --\u0026gt; ci((Circle shape)) 4 5 subgraph A 6 od\u0026gt;Odd shape]-- Two line\u0026lt;br/\u0026gt;edge comment --\u0026gt; ro 7 di{Diamond with \u0026lt;br/\u0026gt; line break} -.-\u0026gt; ro(Rounded\u0026lt;br\u0026gt;square\u0026lt;br\u0026gt;shape) 8 di==\u0026gt;ro2(Rounded square shape) 9 end 10 11 %% Notice that no text in shape are added here instead that is appended further down 12 e --\u0026gt; od3\u0026gt;Really long text with linebreak\u0026lt;br\u0026gt;in an Odd shape] 13 14 %% Comments after double percent signs 15 e((Inner / circle\u0026lt;br\u0026gt;and some odd \u0026lt;br\u0026gt;special characters)) --\u0026gt; f(,.?!+-*ز) 16 17 cyr[Cyrillic]--\u0026gt;cyr2((Circle shape Начало)); 18 19 classDef green fill:#9f6,stroke:#333,stroke-width:2px; 20 classDef orange fill:#f96,stroke:#333,stroke-width:4px; 21 class sq,e green 22 class di orange 23{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph TB sq[Square shape] --\u003e ci((Circle shape)) subgraph A od\u003eOdd shape]-- Two lineedge comment --\u003e ro di{Diamond with line break} -.-\u003e ro(Rounded\nsquare\nshape) di==\u003ero2(Rounded square shape) end %% Notice that no text in shape are added here instead that is appended further down e --\u003e od3\u003eReally long text with linebreak\nin an Odd shape] %% Comments after double percent signs e((Inner / circle\nand some odd special characters)) --\u003e f(,.?!+-*ز) cyr[Cyrillic]--\u003ecyr2((Circle shape Начало)); classDef green fill:#9f6,stroke:#333,stroke-width:2px; classDef orange fill:#f96,stroke:#333,stroke-width:4px; class sq,e green class di orange Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2graph LR 3 A[Hard edge] --\u0026gt;|Link text| B(Round edge) 4 B --\u0026gt; C{Decision} 5 C --\u0026gt;|One| D[Result one] 6 C --\u0026gt;|Two| E[Result two] 7{{\u0026lt; /mermaid \u0026gt;}} Result\ngraph LR A[Hard edge] --\u003e|Link text| B(Round edge) B --\u003e C{Decision} C --\u003e|One| D[Result one] C --\u003e|Two| E[Result two] Class Diagram classDiagram Animal \u003c|-- Duck Animal \u003c|-- Fish Animal \u003c|-- Zebra Animal : +int age Animal : +String gender Animal: +isMammal() Animal: +mate() class Duck{ +String beakColor +swim() +quack() } class Fish{ -int sizeInFeet -canEat() } class Zebra{ +bool is_wild +run() } State Diagram stateDiagram-v2 [*] --\u003e Active state Active { [*] --\u003e NumLockOff NumLockOff --\u003e NumLockOn : EvNumLockPressed NumLockOn --\u003e NumLockOff : EvNumLockPressed -- [*] --\u003e CapsLockOff CapsLockOff --\u003e CapsLockOn : EvCapsLockPressed CapsLockOn --\u003e CapsLockOff : EvCapsLockPressed -- [*] --\u003e ScrollLockOff ScrollLockOff --\u003e ScrollLockOn : EvScrollLockPressed ScrollLockOn --\u003e ScrollLockOff : EvScrollLockPressed } stateDiagram-v2 State1: The state with a note note right of State1 Important information! You can write notes. end note State1 --\u003e State2 note left of State2 : This is the note to the left. Relationship Diagrams Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2erDiagram 3 CUSTOMER ||--o{ ORDER : places 4 ORDER ||--|{ LINE-ITEM : contains 5 CUSTOMER }|..|{ DELIVERY-ADDRESS : uses 6{{\u0026lt; /mermaid \u0026gt;}} Result\nerDiagram CUSTOMER ||--o{ ORDER : places ORDER ||--|{ LINE-ITEM : contains CUSTOMER }|..|{ DELIVERY-ADDRESS : uses User Journey Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2journey 3 title My working day 4 section Go to work 5 Make tea: 5: Me 6 Go upstairs: 3: Me 7 Do work: 1: Me, Cat 8 section Go home 9 Go downstairs: 5: Me 10 Sit down: 5: Me 11{{\u0026lt; /mermaid \u0026gt;}} Result\njourney title My working day section Go to work Make tea: 5: Me Go upstairs: 3: Me Do work: 1: Me, Cat section Go home Go downstairs: 5: Me Sit down: 5: Me Gantt Syntax\n1{{\u0026lt; mermaid \u0026gt;}} 2gantt 3 dateFormat YYYY-MM-DD 4 title Adding GANTT diagram functionality to mermaid 5 excludes weekends 6 %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\u0026#34;sunday\u0026#34;) or \u0026#34;weekends\u0026#34;, but not the word \u0026#34;weekdays\u0026#34;.) 7 8 section A section 9 Completed task :done, des1, 2014-01-06,2014-01-08 10 Active task :active, des2, 2014-01-09, 3d 11 Future task : des3, after des2, 5d 12 Future task2 : des4, after des3, 5d 13 14 section Critical tasks 15 Completed task in the critical line :crit, done, 2014-01-06,24h 16 Implement parser and jison :crit, done, after des1, 2d 17 Create tests for parser :crit, active, 3d 18 Future task in critical line :crit, 5d 19 Create tests for renderer :2d 20 Add to mermaid :1d 21 22 section Documentation 23 Describe gantt syntax :active, a1, after des1, 3d 24 Add gantt diagram to demo page :after a1 , 20h 25 Add another diagram to demo page :doc1, after a1 , 48h 26 27 section Last section 28 Describe gantt syntax :after doc1, 3d 29 Add gantt diagram to demo page :20h 30 Add another diagram to demo page :48h 31{{\u0026lt; /mermaid \u0026gt;}} Result\ngantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid excludes weekends %% (`excludes` accepts specific dates in YYYY-MM-DD format, days of the week (\"sunday\") or \"weekends\", but not the word \"weekdays\".) section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page :20h Add another diagram to demo page :48h Pie Chart 1{{\u0026lt; mermaid \u0026gt;}} 2pie 3 title Key elements in Product X 4 \u0026#34;Calcium\u0026#34; : 42.96 5 \u0026#34;Potassium\u0026#34; : 50.05 6 \u0026#34;Magnesium\u0026#34; : 10.01 7 \u0026#34;Iron\u0026#34; : 5 8{{\u0026lt; /mermaid \u0026gt;}} Result\npie title Key elements in Product X \"Calcium\" : 42.96 \"Potassium\" : 50.05 \"Magnesium\" : 10.01 \"Iron\" : 5 ","link":"https://risetit.fah.uinjkt.ac.id/track/project/mermaid/","section":"track","title":"Mermaid"},{"body":"Welcome to the Archive user guide! This guide shows you how to get started creating technical documentation sites using Compose, including site customization and how to use Archive application.\nGet started now ","link":"https://risetit.fah.uinjkt.ac.id/docs/archive/","section":"docs","title":"Record Center"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/blog/","section":"blog","title":"Blog"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/emoji/","section":"tags","title":"emoji"},{"body":"Emoji can be enabled in a Falcon project in a number of ways.\nThe [emojify](https://goFalcon.io/functions/emojify/) function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site’s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Falcon, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\nInline CSS 1\u0026lt;style\u0026gt; 2 .emojify { 3 font-family: Apple Color Emoji,Segoe UI Emoji,NotoColorEmoji,Segoe UI Symbol,Android Emoji,EmojiSymbols; 4 font-size: 2rem; 5 vertical-align: middle; 6 } 7 @media screen and (max-width:650px) { 8 .nowrap { 9 display: block; 10 margin: 25px 0; 11 } 12 } 13\u0026lt;/style\u0026gt; Javascript 1function createEl(element) { 2 return document.createElement(element); 3} 4 5function elem(selector, parent = document){ 6 let elem = parent.querySelector(selector); 7 return elem != false ? elem : false; 8} 9 10let navBar = elem(`.${bar}`); 11let nav = elem(\u0026#39;.nav-body\u0026#39;); 12let open = \u0026#39;nav-open\u0026#39;; 13let exit = \u0026#39;nav-exit\u0026#39;; 14let drop = \u0026#39;nav-drop\u0026#39;; 15let pop = \u0026#39;nav-pop\u0026#39;; 16let navDrop = elem(`.${drop}`); 17let hidden = \u0026#39;hidden\u0026#39;; Swift 1class Person { 2 var residence: Residence? 3} 4 5class Residence { 6 var rooms = [Room]() 7 var numberOfRooms: Int { 8 return rooms.count 9 } 10 11 12 subscript(i: Int) -\u0026gt; Room { 13 get { 14 return rooms[i] 15 } 16 set { 17 rooms[i] = newValue 18 } 19 } 20 21 func printNumberOfRooms() { 22 print(\u0026#34;The number of rooms is \\(numberOfRooms)\u0026#34;) 23 } 24 25 var address: Address? 26 27} ","link":"https://risetit.fah.uinjkt.ac.id/blog/emoji-support/","section":"blog","tags":"emoji","title":"Emoji Support"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/","section":"tags","title":"Tags"},{"body":"Introduction This tutorial will show you how to create a simple theme in Falcon. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I'll explain how Falcon uses templates and how you can organize your templates to create a theme. I won't cover using CSS to style your theme.\nWe'll start with creating a new site with a very basic template. Then we'll add in a few pages and posts. With small variations on that, you will be able to create many different types of web sites.\nIn this tutorial, commands that you enter will start with the \u0026quot;$\u0026quot; prompt. The output will follow. Lines that start with \u0026quot;#\u0026quot; are comments that I've added to explain a point. When I show updates to a file, the \u0026quot;:wq\u0026quot; on the last line means to save the file.\nHere's an example:\n1## this is a comment 2$ echo this is a command 3this is a command 4 5## edit the file 6$ vi foo.md 7+++ 8date = \u0026#34;2014-09-28\u0026#34; 9title = \u0026#34;creating a new theme\u0026#34; 10+++ 11 12bah and humbug 13:wq 14 15## show it 16$ cat foo.md 17+++ 18date = \u0026#34;2014-09-28\u0026#34; 19title = \u0026#34;creating a new theme\u0026#34; 20+++ 21 22bah and humbug 23$ Some Definitions There are a few concepts that you need to understand before creating a theme.\nSkins Skins are the files responsible for the look and feel of your site. It’s the CSS that controls colors and fonts, it’s the Javascript that determines actions and reactions. It’s also the rules that Falcon uses to transform your content into the HTML that the site will serve to visitors.\nYou have two ways to create a skin. The simplest way is to create it in the layouts/ directory. If you do, then you don’t have to worry about configuring Falcon to recognize it. The first place that Falcon will look for rules and files is in the layouts/ directory so it will always find the skin.\nYour second choice is to create it in a sub-directory of the themes/ directory. If you do, then you must always tell Falcon where to search for the skin. It’s extra work, though, so why bother with it?\nThe difference between creating a skin in layouts/ and creating it in themes/ is very subtle. A skin in layouts/ can’t be customized without updating the templates and static files that it is built from. A skin created in themes/, on the other hand, can be and that makes it easier for other people to use it.\nThe rest of this tutorial will call a skin created in the themes/ directory a theme.\nNote that you can use this tutorial to create a skin in the layouts/ directory if you wish to. The main difference will be that you won’t need to update the site’s configuration file to use a theme.\nThe Home Page The home page, or landing page, is the first page that many visitors to a site see. It is the index.html file in the root directory of the web site. Since Falcon writes files to the public/ directory, our home page is public/index.html.\nSite Configuration File When Falcon runs, it looks for a configuration file that contains settings that override default values for the entire site. The file can use TOML, YAML, or JSON. I prefer to use TOML for my configuration files. If you prefer to use JSON or YAML, you’ll need to translate my examples. You’ll also need to change the name of the file since Falcon uses the extension to determine how to process it.\nFalcon translates Markdown files into HTML. By default, Falcon expects to find Markdown files in your content/ directory and template files in your themes/ directory. It will create HTML files in your public/ directory. You can change this by specifying alternate locations in the configuration file.\nContent Content is stored in text files that contain two sections. The first section is the “front matter,” which is the meta-information on the content. The second section contains Markdown that will be converted to HTML.\nFront Matter The front matter is information about the content. Like the configuration file, it can be written in TOML, YAML, or JSON. Unlike the configuration file, Falcon doesn’t use the file’s extension to know the format. It looks for markers to signal the type. TOML is surrounded by “+++”, YAML by “---”, and JSON is enclosed in curly braces. I prefer to use TOML, so you’ll need to translate my examples if you prefer YAML or JSON.\nThe information in the front matter is passed into the template before the content is rendere into HTML.\nMarkdown Content is written in Markdown which makes it easier to create the content. Falcon runs the content through a Markdown engine to create the HTML which will be written to the output file.\nTemplate Files Falcon uses template files to render content into HTML. Template files are a bridge between the content and presentation. Rules in the template define what content is published, where it's published to, and how it will rendered to the HTML file. The template guides the presentation by specifying the style to use.\nThere are three types of templates: single, list, and partial. Each type takes a bit of content as input and transforms it based on the commands in the template.\nFalcon uses its knowledge of the content to find the template file used to render the content. If it can’t find a template that is an exact match for the content, it will shift up a level and search from there. It will continue to do so until it finds a matching template or runs out of templates to try. If it can’t find a template, it will use the default template for the site.\nPlease note that you can use the front matter to influence Falcon’s choice of templates.\nSingle Template A single template is used to render a single piece of content. For example, an article or post would be a single piece of content and use a single template.\nList Template A list template renders a group of related content. That could be a summary of recent postings or all articles in a category. List templates can contain multiple groups.\nThe homepage template is a special type of list template. Falcon assumes that the home page of your site will act as the portal for the rest of the content in the site.\nPartial Template A partial template is a template that can be included in other templates. Partial templates must be called using the “partial” template command. They are very handy for rolling up common behavior. For example, your site may have a banner that all pages use. Instead of copying the text of the banner into every single and list template, you could create a partial with the banner in it. That way if you decide to change the banner, you only have to change the partial template.\nCreate a New Site Let's use Falcon to create a new web site. I'm a Mac user, so I'll create mine in my home directory, in the Sites folder. If you're using Linux, you might have to create the folder first.\nThe \u0026quot;new site\u0026quot; command will create a skeleton of a site. It will give you the basic directory structure and a useable configuration file.\n1$ falcon new site ~/Sites/karim 2$ cd ~/Sites/karim 3$ ls -l 4total 8 5drwxr-xr-x 7 karim staff 238 Sep 29 16:49 . 6drwxr-xr-x 3 karim staff 102 Sep 29 16:49 .. 7drwxr-xr-x 2 karim staff 68 Sep 29 16:49 archetypes 8-rw-r--r-- 1 karim staff 82 Sep 29 16:49 config.toml 9drwxr-xr-x 2 karim staff 68 Sep 29 16:49 content 10drwxr-xr-x 2 karim staff 68 Sep 29 16:49 layouts 11drwxr-xr-x 2 karim staff 68 Sep 29 16:49 static 12$ Take a look in the content/ directory to confirm that it is empty.\nThe other directories (archetypes/, layouts/, and static/) are used when customizing a theme. That's a topic for a different tutorial, so please ignore them for now.\nGenerate the HTML For the New Site Running the Falcon command with no options will read all the available content and generate the HTML files. It will also copy all static files (that's everything that's not content). Since we have an empty site, it won't do much, but it will do it very quickly.\n1$ falcon --verbose 2INFO: 2014/09/29 Using config file: config.toml 3INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ 4WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] 5WARN: 2014/09/29 Unable to locate layout: [404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12$ The \u0026quot;--verbose\u0026quot; flag gives extra information that will be helpful when we build the template. Every line of the output that starts with \u0026quot;INFO:\u0026quot; or \u0026quot;WARN:\u0026quot; is present because we used that flag. The lines that start with \u0026quot;WARN:\u0026quot; are warning messages. We'll go over them later.\nWe can verify that the command worked by looking at the directory again.\n1$ ls -l 2total 8 3drwxr-xr-x 2 karim staff 68 Sep 29 16:49 archetypes 4-rw-r--r-- 1 karim staff 82 Sep 29 16:49 config.toml 5drwxr-xr-x 2 karim staff 68 Sep 29 16:49 content 6drwxr-xr-x 2 karim staff 68 Sep 29 16:49 layouts 7drwxr-xr-x 4 karim staff 136 Sep 29 17:02 public 8drwxr-xr-x 2 karim staff 68 Sep 29 16:49 static 9$ See that new public/ directory? Falcon placed all generated content there. When you're ready to publish your web site, that's the place to start. For now, though, let's just confirm that we have what we'd expect from a site with no content.\n1$ ls -l public 2total 16 3-rw-r--r-- 1 karim staff 416 Sep 29 17:02 index.xml 4-rw-r--r-- 1 karim staff 262 Sep 29 17:02 sitemap.xml 5$ Falcon created two XML files, which is standard, but there are no HTML files.\nTest the New Site Verify that you can run the built-in web server. It will dramatically shorten your development cycle if you do. Start it by running the \u0026quot;server\u0026quot; command. If it is successful, you will see output similar to the following:\n1$ falcon server --verbose 2INFO: 2014/09/29 Using config file: /home/karim/sites/techlab/config.toml 3INFO: 2014/09/29 syncing from /home/karim/sites/techlab/static/ to /home/karim/Sites/sites/techlab/public/ 4WARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] 5WARN: 2014/09/29 Unable to locate layout: [404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12Serving pages from /home/karim/sites/techlab/public 13Web Server is available at http://localhost:1313 14Press Ctrl+C to stop Connect to the listed URL (it's on the line that starts with \u0026quot;Web Server\u0026quot;). If everything is working correctly, you should get a page that shows the following:\nindex.xml sitemap.xml That's a listing of your public/ directory. Falcon didn't create a home page because our site has no content. When there's no index.html file in a directory, the server lists the files in the directory, which is what you should see in your browser.\nLet’s go back and look at those warnings again.\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] WARN: 2014/09/29 Unable to locate layout: [404.html] That second warning is easier to explain. We haven’t created a template to be used to generate “page not found errors.” The 404 message is a topic for a separate tutorial.\nNow for the first warning. It is for the home page. You can tell because the first layout that it looked for was “index.html.” That’s only used by the home page.\nI like that the verbose flag causes Falcon to list the files that it's searching for. For the home page, they are index.html, _default/list.html, and _default/single.html. There are some rules that we'll cover later that explain the names and paths. For now, just remember that Falcon couldn't find a template for the home page and it told you so.\nAt this point, you've got a working installation and site that we can build upon. All that’s left is to add some content and a theme to display it.\nCreate a New Theme Falcon doesn't ship with a default theme. There are a few available (I counted a dozen when I first installed Falcon) and Falcon comes with a command to create new themes.\nWe're going to create a new theme called \u0026quot;karim.\u0026quot; Since the goal of this tutorial is to show you how to fill out the files to pull in your content, the theme will not contain any CSS. In other words, ugly but functional.\nAll themes have opinions on content and layout. For example, karim uses \u0026quot;post\u0026quot; over \u0026quot;blog\u0026quot;. Strong opinions make for simpler templates but differing opinions make it tougher to use themes. When you build a theme, consider using the terms that other themes do.\nCreate a Skeleton Use the Falcon \u0026quot;new\u0026quot; command to create the skeleton of a theme. This creates the directory structure and places empty files for you to fill out.\n1 $ falcon new theme karim 2 3$ ls -l 4total 8 5drwxr-xr-x 2 karim staff 68 Sep 29 16:49 archetypes 6-rw-r--r-- 1 karim staff 82 Sep 29 16:49 config.toml 7drwxr-xr-x 2 karim staff 68 Sep 29 16:49 content 8drwxr-xr-x 2 karim staff 68 Sep 29 16:49 layouts 9drwxr-xr-x 4 karim staff 136 Sep 29 17:02 public 10drwxr-xr-x 2 karim staff 68 Sep 29 16:49 static 11drwxr-xr-x 3 karim staff 102 Sep 29 17:31 themes 12 13$ find themes -type f | xargs ls -l 14-rw-r--r-- 1 karim staff 1081 Sep 29 17:31 themes/karim/LICENSE.md 15-rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/archetypes/default.md 16-rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/_default/list.html 17-rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/_default/single.html 18-rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/index.html 19-rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/partials/footer.html 20-rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/partials/header.html 21-rw-r--r-- 1 karim staff 93 Sep 29 17:31 themes/karim/theme.toml 22$ The skeleton includes templates (the files ending in .html), license file, a description of your theme (the theme.toml file), and an empty archetype.\nPlease take a minute to fill out the theme.toml and LICENSE.md files. They're optional, but if you're going to be distributing your theme, it tells the world who to praise (or blame). It's also nice to declare the license so that people will know how they can use the theme.\n$ vi themes/karim/theme.toml author = \u0026quot;michael d henderson\u0026quot; description = \u0026quot;a minimal working template\u0026quot; license = \u0026quot;MIT\u0026quot; name = \u0026quot;karim\u0026quot; source_repo = \u0026quot;\u0026quot; tags = [\u0026quot;tags\u0026quot;, \u0026quot;categories\u0026quot;] :wq ## also edit themes/karim/LICENSE.md and change ## the bit that says \u0026quot;YOUR_NAME_HERE\u0026quot; Note that the the skeleton's template files are empty. Don't worry, we'll be changing that shortly.\n$ find themes/karim -name '*.html' | xargs ls -l -rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/_default/list.html -rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/_default/single.html -rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/index.html -rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/partials/footer.html -rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/partials/header.html $ Update the Configuration File to Use the Theme Now that we've got a theme to work with, it's a good idea to add the theme name to the configuration file. This is optional, because you can always add \u0026quot;-t karim\u0026quot; on all your commands. I like to put it the configuration file because I like shorter command lines. If you don't put it in the configuration file or specify it on the command line, you won't use the template that you're expecting to.\nEdit the file to add the theme, add a title for the site, and specify that all of our content will use the TOML format.\n$ vi config.toml theme = \u0026quot;karim\u0026quot; baseurl = \u0026quot;\u0026quot; languageCode = \u0026quot;en-us\u0026quot; title = \u0026quot;karim - totally refreshing\u0026quot; MetaDataFormat = \u0026quot;toml\u0026quot; :wq $ Generate the Site Now that we have an empty theme, let's generate the site again.\n1$ falcon --verbose 2INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 3INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ 4INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ 5WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12$ Did you notice that the output is different? The warning message for the home page has disappeared and we have an additional information line saying that Falcon is syncing from the theme's directory.\nLet's check the public/ directory to see what Falcon's created.\n1$ ls -l public 2total 16 3drwxr-xr-x 2 karim staff 68 Sep 29 17:56 css 4-rw-r--r-- 1 karim staff 0 Sep 29 17:56 index.html 5-rw-r--r-- 1 karim staff 407 Sep 29 17:56 index.xml 6drwxr-xr-x 2 karim staff 68 Sep 29 17:56 js 7-rw-r--r-- 1 karim staff 243 Sep 29 17:56 sitemap.xml 8$ Notice four things:\nFalcon created a home page. This is the file public/index.html. Falcon created a css/ directory. Falcon created a js/ directory. Falcon claimed that it created 0 pages. It created a file and copied over static files, but didn't create any pages. That's because it considers a \u0026quot;page\u0026quot; to be a file created directly from a content file. It doesn't count things like the index.html files that it creates automatically. The Home Page Falcon supports many different types of templates. The home page is special because it gets its own type of template and its own template file. The file, layouts/index.html, is used to generate the HTML for the home page. The Falcon documentation says that this is the only required template, but that depends. Falcon's warning message shows that it looks for three different templates:\nWARN: 2014/09/29 Unable to locate layout: [index.html _default/list.html _default/single.html] If it can't find any of these, it completely skips creating the home page. We noticed that when we built the site without having a theme installed.\nWhen Falcon created our theme, it created an empty home page template. Now, when we build the site, Falcon finds the template and uses it to generate the HTML for the home page. Since the template file is empty, the HTML file is empty, too. If the template had any rules in it, then Falcon would have used them to generate the home page.\n1$ find . -name index.html | xargs ls -l 2-rw-r--r-- 1 karim staff 0 Sep 29 20:21 ./public/index.html 3-rw-r--r-- 1 karim staff 0 Sep 29 17:31 ./themes/karim/layouts/index.html 4$ The Magic of Static Falcon does two things when generating the site. It uses templates to transform content into HTML and it copies static files into the site. Unlike content, static files are not transformed. They are copied exactly as they are.\nFalcon assumes that your site will use both CSS and JavaScript, so it creates directories in your theme to hold them. Remember opinions? Well, Falcon's opinion is that you'll store your CSS in a directory named css/ and your JavaScript in a directory named js/. If you don't like that, you can change the directory names in your theme directory or even delete them completely. Falcon's nice enough to offer its opinion, then behave nicely if you disagree.\n1$ find themes/karim -type d | xargs ls -ld 2drwxr-xr-x 7 karim staff 238 Sep 29 17:38 themes/karim 3drwxr-xr-x 3 karim staff 102 Sep 29 17:31 themes/karim/archetypes 4drwxr-xr-x 5 karim staff 170 Sep 29 17:31 themes/karim/layouts 5drwxr-xr-x 4 karim staff 136 Sep 29 17:31 themes/karim/layouts/_default 6drwxr-xr-x 4 karim staff 136 Sep 29 17:31 themes/karim/layouts/partials 7drwxr-xr-x 4 karim staff 136 Sep 29 17:31 themes/karim/static 8drwxr-xr-x 2 karim staff 68 Sep 29 17:31 themes/karim/static/css 9drwxr-xr-x 2 karim staff 68 Sep 29 17:31 themes/karim/static/js 10$ The Theme Development Cycle When you're working on a theme, you will make changes in the theme's directory, rebuild the site, and check your changes in the browser. Falcon makes this very easy:\nPurge the public/ directory. Run the built in web server in watch mode. Open your site in a browser. Update the theme. Glance at your browser window to see changes. Return to step 4. I’ll throw in one more opinion: never work on a theme on a live site. Always work on a copy of your site. Make changes to your theme, test them, then copy them up to your site. For added safety, use a tool like Git to keep a revision history of your content and your theme. Believe me when I say that it is too easy to lose both your mind and your changes.\nCheck the main Falcon site for information on using Git with Falcon.\nPurge the public/ Directory When generating the site, Falcon will create new files and update existing ones in the public/ directory. It will not delete files that are no longer used. For example, files that were created in the wrong directory or with the wrong title will remain. If you leave them, you might get confused by them later. I recommend cleaning out your site prior to generating it.\nNote: If you're building on an SSD, you should ignore this. Churning on a SSD can be costly.\nFalcon's Watch Option Falcon's \u0026quot;--watch\u0026quot; option will monitor the content/ and your theme directories for changes and rebuild the site automatically.\nLive Reload Falcon's built in web server supports live reload. As pages are saved on the server, the browser is told to refresh the page. Usually, this happens faster than you can say, \u0026quot;Wow, that's totally amazing.\u0026quot;\nDevelopment Commands Use the following commands as the basis for your workflow.\n1## purge old files. Falcon will recreate the public directory. 2## 3$ rm -rf public 4## 5## run Falcon in watch mode 6## 7$ falcon server --watch --verbose Here's sample output showing Falcon detecting a change to the template for the home page. Once generated, the web browser automatically reloaded the page. I've said this before, it's amazing.\n$ rm -rf public $ falcon server --watch --verbose INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 2 ms Watching for changes in /Users/karim/Sites/karim/content Serving pages from /Users/karim/Sites/karim/public Web Server is available at http://localhost:1313 Press Ctrl+C to stop INFO: 2014/09/29 File System Event: [\u0026quot;/Users/karim/Sites/karim/themes/karim/layouts/index.html\u0026quot;: MODIFY|ATTRIB] Change detected, rebuilding site WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 0 pages created 0 tags created 0 categories created in 1 ms Update the Home Page Template The home page is one of a few special pages that Falcon creates automatically. As mentioned earlier, it looks for one of three files in the theme's layout/ directory:\nindex.html _default/list.html _default/single.html We could update one of the default templates, but a good design decision is to update the most specific template available. That's not a hard and fast rule (in fact, we'll break it a few times in this tutorial), but it is a good generalization.\nMake a Static Home Page Right now, that page is empty because we don't have any content and we don't have any logic in the template. Let's change that by adding some text to the template.\n1\u0026lt;!-- vi themes/karim/layouts/index.html --\u0026gt; 2\u0026lt;!DOCTYPE html\u0026gt; 3\u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 \u0026lt;p\u0026gt;Falcon says hello!\u0026lt;/p\u0026gt; 6 \u0026lt;/body\u0026gt; 7\u0026lt;/html\u0026gt; Build the web site and then verify the results.\n1$ falcon --verbose 2INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 3INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ 4INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ 5WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 60 draft content 70 future content 80 pages created 90 tags created 100 categories created 11in 2 ms 12 13$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 14-rw-r--r-- 1 karim staff 78 Sep 29 21:26 public/index.html 15 16$ cat public/index.html 17\u0026lt;!DOCTYPE html\u0026gt; 18\u0026lt;html\u0026gt; 19\u0026lt;body\u0026gt; 20 \u0026lt;p\u0026gt;Falcon says hello!\u0026lt;/p\u0026gt; 21\u0026lt;/html\u0026gt; Live Reload Note: If you're running the server with the --watch option, you'll see different content in the file:\n1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html\u0026gt; 3\u0026lt;body\u0026gt; 4 \u0026lt;p\u0026gt;Falcon says hello!\u0026lt;/p\u0026gt; 5\u0026lt;script\u0026gt; 6 document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; 7 + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] 8 + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; 9 + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; When you use --watch, the Live Reload script is added by Falcon. Look for live reload in the documentation to see what it does and how to disable it.\nBuild a \u0026quot;Dynamic\u0026quot; Home Page \u0026quot;Dynamic home page?\u0026quot; Falcon's a static web site generator, so this seems an odd thing to say. I mean let's have the home page automatically reflect the content in the site every time Falcon builds it. We'll use iteration in the template to do that.\nCreate New Posts Now that we have the home page generating static content, let's add some content to the site. We'll display these posts as a list on the home page and on their own page, too.\nFalcon has a command to generate a skeleton post, just like it does for sites and themes.\n1$ falcon --verbose new post/first.md 2INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 3INFO: 2014/09/29 attempting to create post/first.md of post 4INFO: 2014/09/29 curpath: /Users/karim/Sites/karim/themes/karim/archetypes/default.md 5ERROR: 2014/09/29 Unable to Cast \u0026lt;nil\u0026gt; to map[string]interface{} That wasn't very nice, was it?\nThe \u0026quot;new\u0026quot; command uses an archetype to create the post file. Falcon created an empty default archetype file, but that causes an error when there's a theme. For me, the workaround was to create an archetypes file specifically for the post type.\n1 $ vi themes/karim/archetypes/post.md 2 +++ 3 Description = \u0026#34;\u0026#34; 4 Tags = [] 5 Categories = [] 6 +++ 7 :wq 8 9 $ find themes/karim/archetypes -type f | xargs ls -l 10 -rw-r--r-- 1 karim staff 0 Sep 29 21:53 themes/karim/archetypes/default.md 11 -rw-r--r-- 1 karim staff 51 Sep 29 21:54 themes/karim/archetypes/post.md 12 13 $ falcon --verbose new post/first.md 14 INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 15 INFO: 2014/09/29 attempting to create post/first.md of post 16 INFO: 2014/09/29 curpath: /Users/karim/Sites/karim/themes/karim/archetypes/post.md 17 INFO: 2014/09/29 creating /Users/karim/Sites/karim/content/post/first.md 18 /Users/karim/Sites/karim/content/post/first.md created 19 20 $ falcon --verbose new post/second.md 21 INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 22 INFO: 2014/09/29 attempting to create post/second.md of post 23 INFO: 2014/09/29 curpath: /Users/karim/Sites/karim/themes/karim/archetypes/post.md 24 INFO: 2014/09/29 creating /Users/karim/Sites/karim/content/post/second.md 25 /Users/karim/Sites/karim/content/post/second.md created 26 27 $ ls -l content/post 28 total 16 29 -rw-r--r-- 1 karim staff 104 Sep 29 21:54 first.md 30 -rw-r--r-- 1 karim staff 105 Sep 29 21:57 second.md 31 32 $ cat content/post/first.md 33 +++ 34 Categories = [] 35 Description = \u0026#34;\u0026#34; 36 Tags = [] 37 date = \u0026#34;2014-09-29T21:54:53-05:00\u0026#34; 38 title = \u0026#34;first\u0026#34; 39 40 +++ 41 my first post 42 43 $ cat content/post/second.md 44 +++ 45 Categories = [] 46 Description = \u0026#34;\u0026#34; 47 Tags = [] 48 date = \u0026#34;2014-09-29T21:57:09-05:00\u0026#34; 49 title = \u0026#34;second\u0026#34; 50 51 +++ 52 my second post 53 54 $ Build the web site and then verify the results.\n1$ rm -rf public 2$ falcon --verbose 3INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 4INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ 5INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ 6INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;, \u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;} 7WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 80 draft content 90 future content 102 pages created 110 tags created 120 categories created 13in 4 ms 14$ The output says that it created 2 pages. Those are our new posts:\n1$ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 2-rw-r--r-- 1 karim staff 78 Sep 29 22:13 public/index.html 3-rw-r--r-- 1 karim staff 0 Sep 29 22:13 public/post/first/index.html 4-rw-r--r-- 1 karim staff 0 Sep 29 22:13 public/post/index.html 5-rw-r--r-- 1 karim staff 0 Sep 29 22:13 public/post/second/index.html 6$ The new files are empty because because the templates used to generate the content are empty. The homepage doesn't show the new content, either. We have to update the templates to add the posts.\nList and Single Templates In Falcon, we have three major kinds of templates. There's the home page template that we updated previously. It is used only by the home page. We also have \u0026quot;single\u0026quot; templates which are used to generate output for a single content file. We also have \u0026quot;list\u0026quot; templates that are used to group multiple pieces of content before generating output.\nGenerally speaking, list templates are named \u0026quot;list.html\u0026quot; and single templates are named \u0026quot;single.html.\u0026quot;\nThere are three other types of templates: partials, content views, and terms. We will not go into much detail on these.\nAdd Content to the Homepage The home page will contain a list of posts. Let's update its template to add the posts that we just created. The logic in the template will run every time we build the site.\n1 \u0026lt;!-- $ vi themes/karim/layouts/index.html --\u0026gt; 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 {{ range first 10 .Data.Pages }} 6 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 7 {{ end }} 8 \u0026lt;/body\u0026gt; 9 \u0026lt;/html\u0026gt; 10 \u0026lt;!-- :wq --\u0026gt; Falcon uses the Go template engine. That engine scans the template files for commands which are enclosed between \u0026quot;{{\u0026quot; and \u0026quot;}}\u0026quot;. In our template, the commands are:\nrange .Title end The \u0026quot;range\u0026quot; command is an iterator. We're going to use it to go through the first ten pages. Every HTML file that Falcon creates is treated as a page, so looping through the list of pages will look at every file that will be created.\nThe \u0026quot;.Title\u0026quot; command prints the value of the \u0026quot;title\u0026quot; variable. Falcon pulls it from the front matter in the Markdown file.\nThe \u0026quot;end\u0026quot; command signals the end of the range iterator. The engine loops back to the top of the iteration when it finds \u0026quot;end.\u0026quot; Everything between the \u0026quot;range\u0026quot; and \u0026quot;end\u0026quot; is evaluated every time the engine goes through the iteration. In this file, that would cause the title from the first ten pages to be output as heading level one.\nIt's helpful to remember that some variables, like .Data, are created before any output files. Falcon loads every content file into the variable and then gives the template a chance to process before creating the HTML files.\nBuild the web site and then verify the results.\n1 $ rm -rf public 2 $ falcon --verbose 3 INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 4 INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ 5 INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ 6 INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} 7 WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 8 0 draft content 9 0 future content 10 2 pages created 11 0 tags created 12 0 categories created 13 in 4 ms 14 $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 15 -rw-r--r-- 1 karim staff 94 Sep 29 22:23 public/index.html 16 -rw-r--r-- 1 karim staff 0 Sep 29 22:23 public/post/first/index.html 17 -rw-r--r-- 1 karim staff 0 Sep 29 22:23 public/post/index.html 18 -rw-r--r-- 1 karim staff 0 Sep 29 22:23 public/post/second/index.html 19 $ cat public/index.html 20 \u0026lt;!DOCTYPE html\u0026gt; 21 \u0026lt;html\u0026gt; 22 \u0026lt;body\u0026gt; 23 24 \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; 25 26 \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; 27 28 \u0026lt;/body\u0026gt; 29 \u0026lt;/html\u0026gt; 30 $ Congratulations, the home page shows the title of the two posts. The posts themselves are still empty, but let's take a moment to appreciate what we've done. Your template now generates output dynamically. Believe it or not, by inserting the range command inside of those curly braces, you've learned everything you need to know to build a theme. All that's really left is understanding which template will be used to generate each content file and becoming familiar with the commands for the template engine.\nAnd, if that were entirely true, this tutorial would be much shorter. There are a few things to know that will make creating a new template much easier. Don't worry, though, that's all to come.\nAdd Content to the Posts We're working with posts, which are in the content/post/ directory. That means that their section is \u0026quot;post\u0026quot; (and if we don't do something weird, their type is also \u0026quot;post\u0026quot;).\nFalcon uses the section and type to find the template file for every piece of content. Falcon will first look for a template file that matches the section or type name. If it can't find one, then it will look in the _default/ directory. There are some twists that we'll cover when we get to categories and tags, but for now we can assume that Falcon will try post/single.html, then _default/single.html.\nNow that we know the search rule, let's see what we actually have available:\n1 $ find themes/karim -name single.html | xargs ls -l 2 -rw-r--r-- 1 karim staff 132 Sep 29 17:31 themes/karim/layouts/_default/single.html We could create a new template, post/single.html, or change the default. Since we don't know of any other content types, let's start with updating the default.\nRemember, any content that we haven't created a template for will end up using this template. That can be good or bad. Bad because I know that we're going to be adding different types of content and we're going to end up undoing some of the changes we've made. It's good because we'll be able to see immediate results. It's also good to start here because we can start to build the basic layout for the site. As we add more content types, we'll refactor this file and move logic around. Falcon makes that fairly painless, so we'll accept the cost and proceed.\nPlease see the Falcon documentation on template rendering for all the details on determining which template to use. And, as the docs mention, if you're building a single page application (SPA) web site, you can delete all of the other templates and work with just the default single page. That's a refreshing amount of joy right there.\nUpdate the Template File 1 $ vi themes/karim/layouts/_default/single.html 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;head\u0026gt; 5 \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; 6 \u0026lt;/head\u0026gt; 7 \u0026lt;body\u0026gt; 8 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 9 {{ .Content }} 10 \u0026lt;/body\u0026gt; 11 \u0026lt;/html\u0026gt; 12 :wq Build the web site and verify the results.\n$ rm -rf public $ falcon --verbose INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ INFO: 2014/09/29 found taxonomies: map[string]string{\u0026quot;tag\u0026quot;:\u0026quot;tags\u0026quot;, \u0026quot;category\u0026quot;:\u0026quot;categories\u0026quot;} WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 0 draft content 0 future content 2 pages created 0 tags created 0 categories created in 4 ms $ find public -type f -name '*.html' | xargs ls -l -rw-r--r-- 1 karim staff 94 Sep 29 22:40 public/index.html -rw-r--r-- 1 karim staff 125 Sep 29 22:40 public/post/first/index.html -rw-r--r-- 1 karim staff 0 Sep 29 22:40 public/post/index.html -rw-r--r-- 1 karim staff 128 Sep 29 22:40 public/post/second/index.html 1 \u0026lt;!DOCTYPE html\u0026gt; 2 \u0026lt;html\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;title\u0026gt;first\u0026lt;/title\u0026gt; 5 \u0026lt;/head\u0026gt; 6 \u0026lt;body\u0026gt; 7 \u0026lt;h1\u0026gt;first\u0026lt;/h1\u0026gt; 8 \u0026lt;p\u0026gt;my first post\u0026lt;/p\u0026gt; 9 10 \u0026lt;/body\u0026gt; 11 \u0026lt;/html\u0026gt; 12 13 $ cat public/post/second/index.html 14 \u0026lt;!DOCTYPE html\u0026gt; 15 \u0026lt;html\u0026gt; 16 \u0026lt;head\u0026gt; 17 \u0026lt;title\u0026gt;second\u0026lt;/title\u0026gt; 18 \u0026lt;/head\u0026gt; 19 \u0026lt;body\u0026gt; 20 \u0026lt;h1\u0026gt;second\u0026lt;/h1\u0026gt; 21 \u0026lt;p\u0026gt;my second post\u0026lt;/p\u0026gt; 22 23 \u0026lt;/body\u0026gt; 24 \u0026lt;/html\u0026gt; 25 $ Notice that the posts now have content. You can go to localhost:1313/post/first to verify.\nLinking to Content The posts are on the home page. Let's add a link from there to the post. Since this is the home page, we'll update its template.\n1 $ vi themes/karim/layouts/index.html 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 {{ range first 10 .Data.Pages }} 6 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 7 {{ end }} 8 \u0026lt;/body\u0026gt; 9 \u0026lt;/html\u0026gt; Build the web site and verify the results.\n1 $ rm -rf public 2 $ falcon --verbose 3 INFO: 2014/09/29 Using config file: /Users/karim/Sites/karim/config.toml 4 INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/themes/karim/static/ to /Users/karim/Sites/karim/public/ 5 INFO: 2014/09/29 syncing from /Users/karim/Sites/karim/static/ to /Users/karim/Sites/karim/public/ 6 INFO: 2014/09/29 found taxonomies: map[string]string{\u0026#34;tag\u0026#34;:\u0026#34;tags\u0026#34;, \u0026#34;category\u0026#34;:\u0026#34;categories\u0026#34;} 7 WARN: 2014/09/29 Unable to locate layout: [404.html theme/404.html] 8 0 draft content 9 0 future content 10 2 pages created 11 0 tags created 12 0 categories created 13 in 4 ms 14 15 $ find public -type f -name \u0026#39;*.html\u0026#39; | xargs ls -l 16 -rw-r--r-- 1 karim staff 149 Sep 29 22:44 public/index.html 17 -rw-r--r-- 1 karim staff 125 Sep 29 22:44 public/post/first/index.html 18 -rw-r--r-- 1 karim staff 0 Sep 29 22:44 public/post/index.html 19 -rw-r--r-- 1 karim staff 128 Sep 29 22:44 public/post/second/index.html 20 21 $ cat public/index.html 22 \u0026lt;!DOCTYPE html\u0026gt; 23 \u0026lt;html\u0026gt; 24 \u0026lt;body\u0026gt; 25 26 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/second/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 27 28 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;/post/first/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 29 30 \u0026lt;/body\u0026gt; 31 \u0026lt;/html\u0026gt; 32 33 $ Create a Post Listing We have the posts displaying on the home page and on their own page. We also have a file public/post/index.html that is empty. Let's make it show a list of all posts (not just the first ten).\nWe need to decide which template to update. This will be a listing, so it should be a list template. Let's take a quick look and see which list templates are available.\n1 $ find themes/karim -name list.html | xargs ls -l 2 -rw-r--r-- 1 karim staff 0 Sep 29 17:31 themes/karim/layouts/_default/list.html As with the single post, we have to decide to update _default/list.html or create post/list.html. We still don't have multiple content types, so let's stay consistent and update the default list template.\nCreating Top Level Pages Let's add an \u0026quot;about\u0026quot; page and display it at the top level (as opposed to a sub-level like we did with posts).\nThe default in Falcon is to use the directory structure of the content/ directory to guide the location of the generated html in the public/ directory. Let's verify that by creating an \u0026quot;about\u0026quot; page at the top level:\n1$ vi content/about.md 2+++ 3title = \u0026#34;about\u0026#34; 4description = \u0026#34;about this site\u0026#34; 5date = \u0026#34;2014-09-27\u0026#34; 6slug = \u0026#34;about time\u0026#34; 7+++ 8 9## about us 10 11i\u0026#39;m speechless 12:wq Generate the web site and verify the results.\n1 $ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l 2 -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:08 public/about-time/index.html 3 -rw-rw-r-- 1 mdhender staff 527 Sep 27 15:08 public/index.html 4 -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:08 public/post/first-post/index.html 5 -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:08 public/post/index.html 6 -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:08 public/post/second-post/index.html Notice that the page wasn't created at the top level. It was created in a sub-directory named 'about-time/'. That name came from our slug. Falcon will use the slug to name the generated content. It's a reasonable default, by the way, but we can learn a few things by fighting it for this file.\nOne other thing. Take a look at the home page.\n1 \u0026lt;!-- $ cat public/index.html --\u0026gt; 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/theme/\u0026#34;\u0026gt;creating a new theme\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 6 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/about-time/\u0026#34;\u0026gt;about\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 7 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/second-post/\u0026#34;\u0026gt;second\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 8 \u0026lt;h1\u0026gt;\u0026lt;a href=\u0026#34;http://localhost:1313/post/first-post/\u0026#34;\u0026gt;first\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; 9 \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;script src=\u0026#34;http://\u0026#39; 10 + (location.host || \u0026#39;localhost\u0026#39;).split(\u0026#39;:\u0026#39;)[0] 11 + \u0026#39;:1313/livereload.js?mindelay=10\u0026#34;\u0026gt;\u0026lt;/\u0026#39; 12 + \u0026#39;script\u0026gt;\u0026#39;)\u0026lt;/script\u0026gt;\u0026lt;/body\u0026gt; 13 \u0026lt;/html\u0026gt; Notice that the \u0026quot;about\u0026quot; link is listed with the posts? That's not desirable, so let's change that first.\n1 \u0026lt;!-- $ vi themes/karim/layouts/index.html --\u0026gt; 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;body\u0026gt; 5 \u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; 6 {{ range first 10 .Data.Pages }} 7 {{ if eq .Type \u0026#34;post\u0026#34;}} 8 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 9 {{ end }} 10 {{ end }} 11 12 \u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; 13 {{ range .Data.Pages }} 14 {{ if eq .Type \u0026#34;page\u0026#34; }} 15 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 16 {{ end }} 17 {{ end }} 18 \u0026lt;/body\u0026gt; 19 \u0026lt;/html\u0026gt; 20 \u0026lt;!-- :wq --\u0026gt; Generate the web site and verify the results. The home page has two sections, posts and pages, and each section has the right set of headings and links in it.\nBut, that about page still renders to about-time/index.html.\n1 $ find public -name \u0026#39;*.html\u0026#39; | xargs ls -l 2 -rw-rw-r-- 1 mdhender staff 334 Sep 27 15:33 public/about-time/index.html 3 -rw-rw-r-- 1 mdhender staff 645 Sep 27 15:33 public/index.html 4 -rw-rw-r-- 1 mdhender staff 358 Sep 27 15:33 public/post/first-post/index.html 5 -rw-rw-r-- 1 mdhender staff 0 Sep 27 15:33 public/post/index.html 6 -rw-rw-r-- 1 mdhender staff 342 Sep 27 15:33 public/post/second-post/index.html Knowing that Falcon is using the slug to generate the file name, the simplest solution is to change the slug. Let's do it the hard way and change the permalink in the configuration file.\n$ vi config.toml [permalinks] page = \u0026quot;/:title/\u0026quot; about = \u0026quot;/:filename/\u0026quot; Generate the web site and verify that this didn't work. Falcon lets \u0026quot;slug\u0026quot; or \u0026quot;URL\u0026quot; override the permalinks setting in the configuration file. Go ahead and comment out the slug in content/about.md, then generate the web site to get it to be created in the right place.\nSharing Templates If you've been following along, you probably noticed that posts have titles in the browser and the home page doesn't. That's because we didn't put the title in the home page's template (layouts/index.html). That's an easy thing to do, but let's look at a different option.\nWe can put the common bits into a shared template that's stored in the themes/karim/layouts/partials/ directory.\nCreate the Header and Footer Partials In Falcon, a partial is a sugar-coated template. Normally a template reference has a path specified. Partials are different. Falcon searches for them along a TODO defined search path. This makes it easier for end-users to override the theme's presentation.\n1 $ vi themes/karim/layouts/partials/header.html 2 \u0026lt;!DOCTYPE html\u0026gt; 3 \u0026lt;html\u0026gt; 4 \u0026lt;head\u0026gt; 5 \u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; 6 \u0026lt;/head\u0026gt; 7 \u0026lt;body\u0026gt; 8 :wq 9 10 $ vi themes/karim/layouts/partials/footer.html 11 \u0026lt;/body\u0026gt; 12 \u0026lt;/html\u0026gt; 13 :wq Update the Home Page Template to Use the Partials The most noticeable difference between a template call and a partials call is the lack of path:\n{{ template \u0026quot;theme/partials/header.html\u0026quot; . }} versus\n{{ partial \u0026quot;header.html\u0026quot; . }} Both pass in the context.\nLet's change the home page template to use these new partials.\n1{{ partial \u0026#34;header.html\u0026#34; . }} 2 3\u0026lt;h1\u0026gt;posts\u0026lt;/h1\u0026gt; 4{{ range first 10 .Data.Pages }} 5 {{ if eq .Type \u0026#34;post\u0026#34;}} 6 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Title }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 7 {{ end }} 8{{ end }} 9 10\u0026lt;h1\u0026gt;pages\u0026lt;/h1\u0026gt; 11{{ range .Data.Pages }} 12 {{ if or (eq .Type \u0026#34;page\u0026#34;) (eq .Type \u0026#34;about\u0026#34;) }} 13 \u0026lt;h2\u0026gt;\u0026lt;a href=\u0026#34;{{ .Permalink }}\u0026#34;\u0026gt;{{ .Type }} - {{ .Title }} - {{ .RelPermalink }}\u0026lt;/a\u0026gt;\u0026lt;/h2\u0026gt; 14 {{ end }} 15{{ end }} 16{{ partial \u0026#34;footer.html\u0026#34; . }} Generate the web site and verify the results. The title on the home page is now \u0026quot;your title here\u0026quot;, which comes from the \u0026quot;title\u0026quot; variable in the config.toml file.\nUpdate the Default Single Template to Use the Partials $ vi themes/karim/layouts/_default/single.html {{ partial \u0026quot;header.html\u0026quot; . }} \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; {{ .Content }} {{ partial \u0026quot;footer.html\u0026quot; . }} :wq Generate the web site and verify the results. The title on the posts and the about page should both reflect the value in the markdown file.\nAdd “Date Published” to Posts It's common to have posts display the date that they were written or published, so let's add that. The front matter of our posts has a variable named \u0026quot;date.\u0026quot; It's usually the date the content was created, but let's pretend that's the value we want to display.\nAdd “Date Published” to the Template We'll start by updating the template used to render the posts. The template code will look like:\n{{ .Date.Format \u0026quot;Mon, Jan 2, 2006\u0026quot; }}\nPosts use the default single template, so we'll change that file.\n1\u0026lt;!-- themes/karim/layouts/_default/single.html --\u0026gt; 2{{ partial \u0026#34;header.html\u0026#34; . }} 3 4 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 5 \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; 6 {{ .Content }} 7 8{{ partial \u0026#34;footer.html\u0026#34; . }} Generate the web site and verify the results. The posts now have the date displayed in them. There's a problem, though. The \u0026quot;about\u0026quot; page also has the date displayed.\nAs usual, there are a couple of ways to make the date display only on posts. We could do an \u0026quot;if\u0026quot; statement like we did on the home page. Another way would be to create a separate template for posts.\nThe \u0026quot;if\u0026quot; solution works for sites that have just a couple of content types. It aligns with the principle of \u0026quot;code for today,\u0026quot; too.\nLet's assume, though, that we've made our site so complex that we feel we have to create a new template type. In Falcon-speak, we're going to create a section template.\nLet's restore the default single template before we forget.\n1 \u0026lt;!-- mkdir themes/karim/layouts/post --\u0026gt; 2 $ vi themes/karim/layouts/_default/single.html 3 {{ partial \u0026#34;header.html\u0026#34; . }} 4 5 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 6 {{ .Content }} 7 8 {{ partial \u0026#34;footer.html\u0026#34; . }} Now we'll update the post's version of the single template. If you remember Falcon's rules, the template engine will use this version over the default.\n1\u0026lt;!-- themes/karim/layouts/post/single.html --\u0026gt; 2{{ partial \u0026#34;header.html\u0026#34; . }} 3 4 \u0026lt;h1\u0026gt;{{ .Title }}\u0026lt;/h1\u0026gt; 5 \u0026lt;h2\u0026gt;{{ .Date.Format \u0026#34;Mon, Jan 2, 2006\u0026#34; }}\u0026lt;/h2\u0026gt; 6 {{ .Content }} 7 8{{ partial \u0026#34;footer.html\u0026#34; . }} Note that we removed the date logic from the default template and put it in the post template. Generate the web site and verify the results. Posts have dates and the about page doesn't.\nDon't Repeat Yourself DRY is a good design goal and Falcon does a great job supporting it. Part of the art of a good template is knowing when to add a new template and when to update an existing one. While you're figuring that out, accept that you'll be doing some refactoring. Falcon makes that easy and fast, so it's okay to delay splitting up a template.\n","link":"https://risetit.fah.uinjkt.ac.id/blog/creating-a-new-theme/","section":"blog","title":"Creating a New Theme"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/categories/","section":"categories","title":"Categories"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/development/","section":"tags","title":"development"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/categories/development/","section":"categories","title":"Development"},{"body":"Falcon uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.\nThis document is a brief primer on using Go templates. The Go docs provide more details.\nIntroduction to Go Templates Go templates provide an extremely simple template language. It adheres to the belief that only the most basic of logic belongs in the template or view layer. One consequence of this simplicity is that Go templates parse very quickly.\nA unique characteristic of Go templates is they are content aware. Variables and content will be sanitized depending on the context of where they are used. More details can be found in the Go docs.\nBasic Syntax Golang templates are HTML files with the addition of variables and functions.\nGo variables and functions are accessible within {{ }}\nAccessing a predefined variable \u0026quot;foo\u0026quot;:\n{{ foo }} Parameters are separated using spaces\nCalling the add function with input of 1, 2:\n{{ add 1 2 }} Methods and fields are accessed via dot notation\nAccessing the Page Parameter \u0026quot;bar\u0026quot;\n{{ .Params.bar }} Parentheses can be used to group items together\n{{ if or (isset .Params \u0026quot;alt\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;) }} Caption {{ end }} Variables Each Go template has a struct (object) made available to it. In Falcon each template is passed either a page or a node struct depending on which type of page you are rendering. More details are available on the variables page.\nA variable is accessed by referencing the variable name.\n\u0026lt;title\u0026gt;{{ .Title }}\u0026lt;/title\u0026gt; Variables can also be defined and referenced.\n{{ $address := \u0026quot;123 Main St.\u0026quot;}} {{ $address }} Functions Go template ship with a few functions which provide basic functionality. The Go template system also provides a mechanism for applications to extend the available functions with their own. Falcon template functions provide some additional functionality we believe are useful for building websites. Functions are called by using their name followed by the required parameters separated by spaces. Template functions cannot be added without recompiling Falcon.\nExample:\n{{ add 1 2 }} Includes When including another template you will pass to it the data it will be able to access. To pass along the current context please remember to include a trailing dot. The templates location will always be starting at the /layout/ directory within Falcon.\nExample:\n{{ template \u0026quot;chrome/header.html\u0026quot; . }} Logic Go templates provide the most basic iteration and conditional logic.\nIteration Just like in Go, the Go templates make heavy use of range to iterate over a map, array or slice. The following are different examples of how to use range.\nExample 1: Using Context\n{{ range array }} {{ . }} {{ end }} Example 2: Declaring value variable name\n{{range $element := array}} {{ $element }} {{ end }} Example 2: Declaring key and value variable name\n{{range $index, $element := array}} {{ $index }} {{ $element }} {{ end }} Conditionals If, else, with, or, \u0026amp; and provide the framework for handling conditional logic in Go Templates. Like range, each statement is closed with end.\nGo Templates treat the following values as false:\nfalse 0 any array, slice, map, or string of length zero Example 1: If\n{{ if isset .Params \u0026quot;title\u0026quot; }}\u0026lt;h4\u0026gt;{{ index .Params \u0026quot;title\u0026quot; }}\u0026lt;/h4\u0026gt;{{ end }} Example 2: If -\u0026gt; Else\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{else}} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Example 3: And \u0026amp; Or\n{{ if and (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Example 4: With\nAn alternative way of writing \u0026quot;if\u0026quot; and then referencing the same value is to use \u0026quot;with\u0026quot; instead. With rebinds the context . within its scope, and skips the block if the variable is absent.\nThe first example above could be simplified as:\n{{ with .Params.title }}\u0026lt;h4\u0026gt;{{ . }}\u0026lt;/h4\u0026gt;{{ end }} Example 5: If -\u0026gt; Else If\n{{ if isset .Params \u0026quot;alt\u0026quot; }} {{ index .Params \u0026quot;alt\u0026quot; }} {{ else if isset .Params \u0026quot;caption\u0026quot; }} {{ index .Params \u0026quot;caption\u0026quot; }} {{ end }} Pipes One of the most powerful components of Go templates is the ability to stack actions one after another. This is done by using pipes. Borrowed from unix pipes, the concept is simple, each pipeline's output becomes the input of the following pipe.\nBecause of the very simple syntax of Go templates, the pipe is essential to being able to chain together function calls. One limitation of the pipes is that they only can work with a single value and that value becomes the last parameter of the next pipeline.\nA few simple examples should help convey how to use the pipe.\nExample 1 :\n{{ if eq 1 1 }} Same {{ end }} is the same as\n{{ eq 1 1 | if }} Same {{ end }} It does look odd to place the if at the end, but it does provide a good illustration of how to use the pipes.\nExample 2 :\n{{ index .Params \u0026quot;disqus_url\u0026quot; | html }} Access the page parameter called \u0026quot;disqus_url\u0026quot; and escape the HTML.\nExample 3 :\n{{ if or (or (isset .Params \u0026quot;title\u0026quot;) (isset .Params \u0026quot;caption\u0026quot;)) (isset .Params \u0026quot;attr\u0026quot;)}} Stuff Here {{ end }} Could be rewritten as\n{{ isset .Params \u0026quot;caption\u0026quot; | or isset .Params \u0026quot;title\u0026quot; | or isset .Params \u0026quot;attr\u0026quot; | if }} Stuff Here {{ end }} Context (aka. the dot) The most easily overlooked concept to understand about Go templates is that {{ . }} always refers to the current context. In the top level of your template this will be the data set made available to it. Inside of a iteration it will have the value of the current item. When inside of a loop the context has changed. . will no longer refer to the data available to the entire page. If you need to access this from within the loop you will likely want to set it to a variable instead of depending on the context.\nExample:\n{{ $title := .Site.Title }} {{ range .Params.tags }} \u0026lt;li\u0026gt; \u0026lt;a href=\u0026quot;{{ $baseurl }}/tags/{{ . | urlize }}\u0026quot;\u0026gt;{{ . }}\u0026lt;/a\u0026gt; - {{ $title }} \u0026lt;/li\u0026gt; {{ end }} Notice how once we have entered the loop the value of {{ . }} has changed. We have defined a variable outside of the loop so we have access to it from within the loop.\nFalcon Parameters Falcon provides the option of passing values to the template language through the site configuration (for sitewide values), or through the meta data of each specific piece of content. You can define any values of any type (supported by your front matter/config format) and use them however you want to inside of your templates.\nUsing Content (page) Parameters In each piece of content you can provide variables to be used by the templates. This happens in the front matter.\nAn example of this is used in this documentation site. Most of the pages benefit from having the table of contents provided. Sometimes the TOC just doesn't make a lot of sense. We've defined a variable in our front matter of some pages to turn off the TOC from being displayed.\nHere is the example front matter:\n1--- 2title: \u0026#34;Permalinks\u0026#34; 3date: \u0026#34;2013-11-18\u0026#34; 4aliases: 5 - \u0026#34;/doc/permalinks/\u0026#34; 6groups: [\u0026#34;extras\u0026#34;] 7groups_weight: 30 8notoc: true 9--- Here is the corresponding code inside of the template:\n1 {{ if not .Params.notoc }} 2 \u0026lt;div id=\u0026#34;toc\u0026#34; class=\u0026#34;well col-md-4 col-sm-6\u0026#34;\u0026gt; 3 {{ .TableOfContents }} 4 \u0026lt;/div\u0026gt; 5 {{ end }} Using Site (config) Parameters In your top-level configuration file (eg, config.yaml) you can define site parameters, which are values which will be available to you in chrome.\nFor instance, you might declare:\n1params: 2 CopyrightHTML: \u0026#34;Copyright \u0026amp;#xA9; 2013 John Doe. All Rights Reserved.\u0026#34; 3 TwitterUser: \u0026#34;spf13\u0026#34; 4 SidebarRecentLimit: 5 Within a footer layout, you might then declare a \u0026lt;footer\u0026gt; which is only provided if the CopyrightHTML parameter is provided, and if it is given, you would declare it to be HTML-safe, so that the HTML entity is not escaped again. This would let you easily update just your top-level config file each January 1st, instead of hunting through your templates.\n1 {{if .Site.Params.CopyrightHTML}} 2 \u0026lt;footer\u0026gt; 3 \u0026lt;div class=\u0026#34;text-center\u0026#34;\u0026gt;{{.Site.Params.CopyrightHTML | safeHtml}}\u0026lt;/div\u0026gt; 4 \u0026lt;/footer\u0026gt; 5 {{end}} An alternative way of writing the \u0026quot;if\u0026quot; and then referencing the same value is to use \u0026quot;with\u0026quot; instead. With rebinds the context . within its scope, and skips the block if the variable is absent:\n1 {{with .Site.Params.TwitterUser}} 2 \u0026lt;span class=\u0026#34;twitter\u0026#34;\u0026gt; 3 \u0026lt;a href=\u0026#34;https://twitter.com/{{.}}\u0026#34; rel=\u0026#34;author\u0026#34;\u0026gt; 4 \u0026lt;img src=\u0026#34;/images/twitter.png\u0026#34; width=\u0026#34;48\u0026#34; height=\u0026#34;48\u0026#34; title=\u0026#34;Twitter: {{.}}\u0026#34; 5 alt=\u0026#34;Twitter\u0026#34;\u0026gt;\u0026lt;/a\u0026gt; 6 \u0026lt;/span\u0026gt; 7 {{end}} Finally, if you want to pull \u0026quot;magic constants\u0026quot; out of your layouts, you can do so, such as in this example:\n1 \u0026lt;nav class=\u0026#34;recent\u0026#34;\u0026gt; 2 \u0026lt;h1\u0026gt;Recent Posts\u0026lt;/h1\u0026gt; 3 \u0026lt;ul\u0026gt;{{range first .Site.Params.SidebarRecentLimit .Site.Recent}} 4 \u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;{{.RelPermalink}}\u0026#34;\u0026gt;{{.Title}}\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt; 5 {{end}}\u0026lt;/ul\u0026gt; 6 \u0026lt;/nav\u0026gt; ","categories":"Development,golang","link":"https://risetit.fah.uinjkt.ac.id/blog/goisforlovers/","section":"blog","tags":"go,golang,templates,themes,development","title":"Falcon Template Primer"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/go/","section":"tags","title":"go"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/golang/","section":"tags","title":"golang"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/categories/golang/","section":"categories","title":"golang"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/templates/","section":"tags","title":"templates"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/tags/themes/","section":"tags","title":"themes"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/about/legal/","section":"about","title":""},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/authors/","section":"authors","title":"Authors"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/business/berita-1/","section":"news","title":"Berita Bisnis 1"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/business/berita-2/","section":"news","title":"Berita Bisnis 2"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/business/berita-3/","section":"news","title":"Berita Bisnis 3"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/business/berita-4/","section":"news","title":"Berita Bisnis 4"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/business/berita-5/","section":"news","title":"Berita Bisnis 5"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news_tags/business/","section":"news_tags","title":"business"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news_cats/business/","section":"news_cats","title":"business"},{"body":"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\n","link":"https://risetit.fah.uinjkt.ac.id/course/course-1/","section":"course","title":"Course 1"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/course-2/","section":"course","title":"Course 2"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course/course-3/","section":"course","title":"Course 3"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course-cats/","section":"course-cats","title":"Course-Cats"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/course-tags/","section":"course-tags","title":"Course-Tags"},{"body":"General Terms and Conditions of Use Program Appendix 1. Background and Purpose. This Program Appendix (\u0026quot;Appendix\u0026quot;) establishes the terms and conditions under which Partner will participate in the Faculty Of Literature and Humanities Academy Program (\u0026quot;FAH MOOC\u0026quot; or \u0026quot;Program\u0026quot;) in the Territory. Under the Program, Faculty Of Literature and Humanities Academy provides Partner an Internet deployed and managed Curriculum, Software, and Services and Partner provides the facilities and Teachers and delivers the Courses to Students as set forth in this Appendix. Capitalized terms not defined in this Appendix shall have the meaning given to them in the Partner Agreement between the parties, including the Partner Terms and Conditions.\n2. Definitions. \u0026quot;Partner\u0026quot; means a qualified university, academic institution, or entity with a workforce development program that acquires the Faculty Of Literature and Humanities Academy Subscription for its own use to be provided to Partner's Students and without the right to directly or indirectly sell, resell, remarket, or, in whole or in part, otherwise distribute Faculty Of Literature and Humanities Academy. Eligibility of a Partner is determined at Faculty Of Literature and Humanities Academy's sole and exclusive discretion.\n\u0026quot;Appendix Effective Date\u0026quot; means the first date when both parties have fully accepted or signed the Partner Agreement including this Appendix.\n\u0026quot;Curriculum\u0026quot; means the Courses, Course Materials, Manuals, and any and all instructional content, assessment, tests, and instructional materials included therein whether in print or electronic format, provided by Faculty Of Literature and Humanities Academy as part of the Faculty Of Literature and Humanities Academy Program.\n\u0026quot;Course\u0026quot; or \u0026quot;Courses\u0026quot; means the specific courses or units of study that may be taught under the FAH MOOC and as set forth in Exhibit A, Exhibit C and as otherwise offered by Faculty Of Literature and Humanities Academy under the Faculty Of Literature and Humanities Academy Program.\n\u0026quot;Course Materials\u0026quot; means any and all instructional and educational content provided directly or indirectly by Faculty Of Literature and Humanities Academy, including without limitation designs, course names and numbers, course materials, Manuals, methodologies, software, scripts, processes, instructional materials, slides, notes, lab exercises, assessment tools, quizzes, tests, answer keys, scripts, files, instructor guides and/or any other materials in any format, provided in connection with the Curriculum whether distributed in print, electronic, or video format, including, without limitation, Student Kits, Exams, Exam Kits, and Exam Authorizations.\n\u0026quot;Documentation\u0026quot; means user manuals, training materials, software descriptions and specifications, brochures, technical Services, in any format.\n\u0026quot;Exam\u0026quot; means a Faculty Of Literature and Humanities Academy performance based certification exam.\n\u0026quot;Manuals\u0026quot; means those manuals used by Faculty Of Literature and Humanities Academy instructors in instructing Technical Training courses. Manuals are different from the Course Materials and shall not be used in or brought into the Courses.\n\u0026quot;Program Subscription Fee\u0026quot; means the annual subscription fee paid by Partner that provides Curriculum, Software and Services to the Partner and enables Partner to teach the Curriculum to Students as set forth herein or in separate mutually agreed order.\n\u0026quot;Services\u0026quot; means Learning Services provided as part of the Program.\n\u0026quot;Student(s)\u0026quot; is a person enrolled full or part-time in the Partner's school, institution of learning and admitted to a degree awarding program (e.g. diploma, or degree, program, or certificate program) and attends a Course as taught by a Teacher.\n\u0026quot;Student Fee\u0026quot; shall mean the per Student per Course fee set forth in Exhibit A of this Appendix, if applicable.\n\u0026quot;Software\u0026quot; means Faculty Of Literature and Humanities Academy Enterprise Linux, JBoss Enterprise Middleware and other software programs branded by Faculty Of Literature and Humanities Academy, its Affiliates and/or third parties including all modifications, additions or further enhancements delivered by Faculty Of Literature and Humanities Academy.\n\u0026quot;Teacher\u0026quot; is a Partner employee or contractor who meets all qualifications determined by Faculty Of Literature and Humanities Academy who teaches and instructs Courses for the Partner.\n\u0026quot;Technical Training\u0026quot; means the courses and certification exams offered publicly and commercially by Faculty Of Literature and Humanities Academy on an open enrollment or on-site basis, including the Manuals used by Faculty Of Literature and Humanities Academy instructors in instructing technical training courses and the Student Manuals included in the Course.\n3. License and Ownership 3.1 License Grant. Upon Partner paying the applicable Fee(s), Faculty Of Literature and Humanities Academy grants Partner a non-exclusive, revocable, fully paid license, with no right to sublicense (including, but not limited to, sell), to use the Curriculum and Course Materials pursuant to the Agreement as follows: (a) distribution of Course Materials is limited to one (1) copy per Instructor and one (1) copy per Student; (b) Curriculum are provided solely for the use by Instructors and Students in the Course and such Curriculum may not be copied or transferred without the prior written consent of Faculty Of Literature and Humanities Academy; and (c) Curriculum must be taught sequentially and completed by Partner in no less than eight (8) weeks. The Curriculum shall not be used to teach or instruct to any person who is not officially enrolled as a Student and admitted to a degree, diploma, or certificate awarding program of Partner.\nNotwithstanding the foregoing, all Curriculum is the sole property of Faculty Of Literature and Humanities Academy and its licensors, and are copyrighted by Faculty Of Literature and Humanities Academy unless otherwise indicated therein. Faculty Of Literature and Humanities Academy and its licensors will have sole ownership of any and all Curriculum including but not limited to methodologies, software, processes, or other intellectual property developed during the performance of the Services. Faculty Of Literature and Humanities Academy will provide Software for the use by the Partner and Students in the Course. Use of the Software is subject to the End User License Agreement set forth fah eula. The Services may only be used by Partner. Partner is solely responsible for providing prerequisite skills, assessing its Students' suitability for use of the Curriculum, delivery of all instruction to Students, all grading and assessment of Students, and handling of all Student and Teacher information. Partner hereby agrees that Software used outside of the Program is covered under terms and conditions of the Enterprise Agreement including Appendix 1, Subscription Services, set forth at fah license, which may be amended from time to time by Faculty Of Literature and Humanities Academy in its sole discretion.\n3.2 Retained Rights. No part of the Curriculum may be photocopied or duplicated by any means, whether photographic, or electronic, or mechanical, or sold or distributed in any other delivery format whether in print or electronic, or used as the basis for any other training product or service, without written permission from Faculty Of Literature and Humanities Academy. Partner's rights in the Curriculum are limited to those license rights expressly granted under this Appendix, and Faculty Of Literature and Humanities Academy retains all rights not expressly granted. Partner will not (a) modify the Curriculum in any manner; or (b) use the Curriculum for any purpose not specifically permitted by this Appendix. Faculty Of Literature and Humanities Academy and its licensors will own and retain all right, title, and interest in the Curriculum and all intellectual property rights inherent therein, including without limitation all changes and improvements requested or suggested by Partner, notwithstanding any use of terms such as \u0026quot;purchase\u0026quot;, \u0026quot;sale\u0026quot;, or the like within the Agreement. Partner represents and warrants that its use of the Curriculum will be to fulfill obligations under this Appendix. Any unauthorized use of the Curriculum will be deemed a material breach of the Agreement. Prior to providing Students with access to Curriculum, Partner will require each Student to sign or otherwise assent (in a binding manner) to the Enterprise Agreement with Appendix 2, Training, Training Units, and Consulting Units set forth at fah license, which may be amended from time to time by Faculty Of Literature and Humanities Academy in its sole discretion. Partner's internal use of Courses or Exams is subject to the Enterprise Agreement with Appendix 2, Training, Training Units, and Consulting Units set forth at fah license, which may be amended from time to time by Faculty Of Literature and Humanities Academy in its sole discretion.\n3.3 Permitted Marks. Partner may only use the logo(s) set forth in Exhibit B to the Program, based upon the Partner level in Exhibit A, in conjunction with the promotion of Partner providing Faculty Of Literature and Humanities Academy Courses to Students. Partner may use Faculty Of Literature and Humanities Academy Distinguished Academy Logo set forth in Exhibit B if all Partner's Teachers are certified Faculty Of Literature and Humanities Academy Professionals for the Faculty Of Literature and Humanities Academy Software Courses they teach. All other Partners may use the Faculty Of Literature and Humanities Academy Logo set forth in Exhibit B. Partner may not use this logo in general advertisements or marketing materials that do not specifically address or support the sale of Courses under the Program.\n3.4 Copyright Notices. Partner will ensure that all copies of the Curriculum in Partner's possession or control incorporate copyright and other proprietary notices in the same manner that Faculty Of Literature and Humanities Academy incorporates such notices in the Curriculum or in any manner reasonably requested by Faculty Of Literature and Humanities Academy. Partner will promptly notify Faculty Of Literature and Humanities Academy in writing upon its discovery of any unauthorized use of the Curriculum or infringement of the Curriculum or Faculty Of Literature and Humanities Academy's proprietary rights in the Curriculum.\n3.5 Use of Faculty Of Literature and Humanities Academy Software. Any use of Faculty Of Literature and Humanities Academy Software is subject to Faculty Of Literature and Humanities Academy's standard agreements including the Enterprise Agreement set forth at fah license, the applicable Faculty Of Literature and Humanities Academy End User Agreement(s) set forth at fah license/eulas and/or any other mutually signed written agreement with Faculty Of Literature and Humanities Academy as applicable.\n4. Fees and Payment 4.1 General. Any fees or charges (\u0026quot;Fees\u0026quot;) will be due and payable by Partner in accordance with the Agreement. Partner may purchase from Faculty Of Literature and Humanities Academy directly, or through an Authorized Faculty Of Literature and Humanities Academy Reseller Partner. If Partner acquires Subscriptions, Courses and/or Services through a Faculty Of Literature and Humanities Academy Program Reseller, the Fees for such Subscriptions, Courses and/or Services will be determined by such Reseller and may vary from the Faculty Of Literature and Humanities Academy Fees.\n4.2 Direct. If Partner purchases directly from Faculty Of Literature and Humanities Academy, Fees will be identified by Faculty Of Literature and Humanities Academy in an Order Form and are (a) due upon Faculty Of Literature and Humanities Academy's acceptance of an Order Form, and (b) payable in accordance with this section. All Fees are stated in United States Dollars. Partner must pay all Fees within thirty (30) days from the date of invoice, without regard for when, and whether, Partner collects payment from a Student. Fees do not include out-of-pocket expenses or shipping costs. Partner agrees to reimburse Faculty Of Literature and Humanities Academy for its reasonable expenses incurred in performing the Services including travel, lodging and non-routine supplies, in accordance with Faculty Of Literature and Humanities Academy's travel and expense policies. All Fees are non-refundable. Faculty Of Literature and Humanities Academy will invoice Partner upon Faculty Of Literature and Humanities Academy's receipt of a purchase order for any amounts due to Faculty Of Literature and Humanities Academy pursuant to this Agreement; provided, however, that the terms of such purchase order will not amend, supplement or modify the terms of this Agreement or be binding on Faculty Of Literature and Humanities Academy. Faculty Of Literature and Humanities Academy reserves the right to change the credit terms or terminate the Agreement if Faculty Of Literature and Humanities Academy has not received payment within five (5) days of when it is due. Renewal Fees will be the same price listed in the Order Form.\n5. Publicity. Faculty Of Literature and Humanities Academy and Partner shall each have the right to identify Partner as a Faculty Of Literature and Humanities Academy partner, provided, however, that for any press release, media alert, or other public communication, each party shall obtain the other party's review and written consent before publishing such information in any form\n6. Term, Termination and Mandatory Disclosure 6.1 Term. Unless otherwise specified in writing by the parties, the initial term of this Appendix shall be one (1) year (the \u0026quot;Initial Term\u0026quot;). Thereafter, the term for this Appendix shall renew for successive terms of one (1) year each (each, a \u0026quot;Renewal Term\u0026quot;), with each Renewal Term beginning on the anniversary of the Initial Term unless either party gives written notice to the other of its intention not to renew at least sixty (60) days prior to the commencement of the next term. As used herein, the Initial Term and each Renewal Term individually refer to a \u0026quot;Term\u0026quot; and collectively the \u0026quot;Appendix Term.\u0026quot;\n6.2 Termination.\n6.2.1 Termination for Breach. Notwithstanding anything to the contrary Faculty Of Literature and Humanities Academy may terminate this Appendix as provided for under Section 13.2 of the Partner Terms and Conditions Appendix, or in the event (a) Partner fails to pay an invoice when due, (b) Partner commits a breach of this Agreement and fails to remedy that breach within 30 days of receipt of notice of breach, or (c) as otherwise provided in the Agreement. Partner may terminate the Appendix in the event Faculty Of Literature and Humanities Academy commits a material breach of the Appendix and fails to remedy such breach within 30 days of receipt of notice of material breach.\n6.2.2 Termination for Convenience. Either Party may terminate this Appendix, without prejudice to any other right or remedy, for any reason upon sixty (60) days notice in writing to the other Party.\n6.3 Survival. Upon expiration or termination, all rights and obligations of the Parties under this Appendix will terminate immediately except, Section 3.2, 3.4, 4.2, Section 3 of Exhibit A, and Exhibit C will survive such termination or expiration. Termination of this Agreement shall not affect any agreements between Faculty Of Literature and Humanities Academy and any Students.\n6.4 Mandatory Disclosure. For the avoidance of doubt, Partner may disclose the existence of this agreement and relevant terms, if it is required to do so by applicable law or regulation. Before disclosing the information, to the extent reasonably practical, Partner shall first notify Faculty Of Literature and Humanities Academy of the disclosure requirement (if it can provide notice without breaching any legal or regulatory requirement).\nExhibit A: Faculty Of Literature and Humanities Academy Subscription Faculty Of Literature and Humanities Academy Subscription. Faculty Of Literature and Humanities Academy Subscriptions contain the following:\nAuthorization and access to, and use of, the Curriculum in accordance with the terms set forth herein. The Program Fee includes Curriculum and Fees for the initial two hundred (40) Students. Additional Student Curriculum access may be purchased on a per Student basis; Exams and exam delivery are not included in the Faculty Of Literature and Humanities Academy Subscription and may be purchased separately; and A list of standard Course offerings in the Faculty Of Literature and Humanities Academy is available from Faculty Of Literature and Humanities Academy or a Faculty Of Literature and Humanities Academy Reseller. Partner Requirements.\nPartner is solely responsible for providing pre-requisite skills, assessing Student's suitability for use of the Course(s) and Curriculum, appropriate use of any internet access, delivery of all instruction to Students, all grading and assessment of Students, and handling of all Student information. Partner must notify Faculty Of Literature and Humanities Academy of the number of Students in each Course within one business day after the Course begins.\nPartner will provide Students with access to Student software labs. Access to such labs may be purchased through a Faculty Of Literature and Humanities Academy Lab Partner, through a third party cloud hosting provider authorized to provide such software lab access, or may be provided by the Partner through its own resources.\nPartner shall maintain at least one (1) Faculty Of Literature and Humanities Academy Certified Professional during the Appendix Term. Partner will notify Faculty Of Literature and Humanities Academy upon appointment or replacement of Faculty Of Literature and Humanities Academy Certified Professionals. Faculty Of Literature and Humanities Academy Subscription Fees. Partner shall pay the Program Fee, if applicable, annually, before the beginning of the Initial Term and each Renewal Term. Courses and additional services can be ordered by Partner from a Faculty Of Literature and Humanities Academy Reseller. All Faculty Of Literature and Humanities Academy Services purchased during the Appendix Term must be used within each one (1) year Term in which it was purchased or such Faculty Of Literature and Humanities Academy Services shall be forfeited.\nExhibit B: Faculty Of Literature and Humanities Academy Program Marks Faculty Of Literature and Humanities Academy:\nExhibit C: Faculty Of Literature and Humanities Academy, Courses, and Additional Services Faculty Of Literature and Humanities Academy Services 0\nSKU Title Description Price Term FAHMOOC40 Faculty Of Literature and Humanities Academy Standard Program Access for 40 to approved Faculty Of Literature and Humanities Academy courses $0 4 Year FAHMOOC41 Faculty Of Literature and Humanities Academy Standard Program: Add-on Student Access for 1 student to approved Faculty Of Literature and Humanities Academy courses $0 4 Year ","link":"https://risetit.fah.uinjkt.ac.id/about/legal/internal/mooc-aggrement/","section":"about","title":"Faculty Of Literature and Humanities Academy Agreement"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/formats/","section":"formats","title":"Formats"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/games/game-1/","section":"news","title":"Games 1"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/games/game-2/","section":"news","title":"Games 2"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/games/game-3/","section":"news","title":"Games 3"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/games/game-4/","section":"news","title":"Games 4"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/games/game-5/","section":"news","title":"Games 5"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/formats/news/","section":"formats","title":"news"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news_cats/","section":"news_cats","title":"News_cats"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news_tags/","section":"news_tags","title":"News_tags"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/stories/story-1/","section":"news","title":"Story 1"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/stories/story-2/","section":"news","title":"Story 2"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/stories/story-3/","section":"news","title":"Story 3"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/news/stories/story-4/","section":"news","title":"Story 4"},{"body":" Untuk meningkatkan layanan teknologi Fakultas Adab dan Humaniora serta sekaligus sebagai implementasi dari pengabdian masyarakat, berikut adalah layanan yang dikelola oleh unit riset teknologi informasi Fakultas Adab dan Humaiora.\nStatuta Status pendirian Unit Riset Teknologi Informasi Fakultas Adab dan Humaniora merujuk kepada\nRujukan Keterangan Dokumen Keputusan Dekan Fakultas Adab dan Humaniora UIN Syarif Hidayatullah Jakarta Nomor 23 Tahun 2023 Fungsi Berdasarkan kepada Surat Keputusan Dekan Fakultas Adab dan Humaniora no.23 tahun 2023 maka fungsi dari Unit Riset Teknologi Informasi Fakultas Adab dan Humaniora adalah Pelatihan Memberikan layanan pelatihan sistem internal fakultas kepada civitas akademika Fakultas Adab dan Humaniora dan Pelatihan terbuka untuk publik. Perencanaan Memberikan masukan atau menyusun perencanaan terkait pengembangan teknologi informasi di lingkungan Fakultas Adab dan Humaniora jika dibutuhkan. Pengelolaan Melakukan pemeliharaan terhadap infrastruktur teknologi informasi yang berada dibawah program pengembangan teknologi informasi Fakultas Adab dan Humaniora. Pengembangan Menyusun dan mengimplementasikan program pengembangan teknologi informasi yang bersifat internal untuk lingkungan Fakultas Adab dan Humaniora ataupun publik ( Free Open Source Software ). Penelitian Aktif dalam penelitian terkait perkembangan teknologi informasi dan membentuk kerjasama dengan lembaga lainya. Dukungan Memberikan dukungan teknis dalam cakupan operasional teknologi informasi untuk civitas akademika Fakultas Adab dan Humaniora. ","link":"https://risetit.fah.uinjkt.ac.id/about/","section":"about","title":"Tentang"},{"body":"","link":"https://risetit.fah.uinjkt.ac.id/track/","section":"track","title":"Tracks"}]